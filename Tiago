//ServidorSocket.java

package sockets;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

import as.GerenciadorDeClientes;

public class ServidorSocket {

	public static void main(String[] args) {
		ServerSocket servidor = null;
		try {
			System.out.println("startando servidor");
			servidor = new ServerSocket(9999);
			System.out.println("servidor startado");
			while(true) {
				Socket cliente = servidor.accept();//esperando pessoas se conectarem
				new GerenciadorDeClientes(cliente);
			}
		}catch(IOException e){
			try {
				if(servidor != null)
					servidor.close();
			}catch (IOException e1) {}
			System.err.println("a porta estÃ¡ ocupada ou o servidor for fechado");
			e.printStackTrace();
		}

	}

}

//GerenciadorDeClientes.java
package as;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;

//import jdk.internal.org.jline.utils.InputStreamReader;

public class GerenciadorDeClientes extends Thread{
	private Socket cliente;
	private String nomeCliente;
	private BufferedReader leitor;
	private PrintWriter escritor;
	//chave valor = joÃ£o Ã© dono da casa
	private static final Map<String,GerenciadorDeClientes> clientes = new HashMap<String,GerenciadorDeClientes>();
	
	public GerenciadorDeClientes(Socket cliente) {
		this.cliente = cliente;
		start();
	}
	
	@Override
	public void run() {
		try {
			leitor = new BufferedReader(new InputStreamReader(cliente.getInputStream()));
			escritor = new PrintWriter(cliente.getOutputStream(), true);
			escritor.println("por favor digite seu nome");
			String msg = leitor.readLine();
			this.nomeCliente = msg;
			escritor.println("OlÃ¡ " + this.nomeCliente);
			clientes.put(this.nomeCliente,this);
			while(true) {
				msg = leitor.readLine();
				if(msg.equalsIgnoreCase("::SAIR")) {
					this.cliente.close();
				}else if(msg.toLowerCase().startsWith("::msg")){
					String nomeDestinatario = msg.substring(5, msg.length());
					System.out.println("Enviando para " + nomeDestinatario);
					GerenciadorDeClientes destinatario = clientes.get(nomeDestinatario);
					if(destinatario == null) {
						escritor.println("O cliente nÃ£o existe");
					}else {
						escritor.println("Digite uma mensagem para " + destinatario.getNomeCliente());
						destinatario.getEscritor().println(this.nomeCliente + " disse: " + leitor.readLine());
					}
				}else {
					escritor.println(this.nomeCliente + " VocÃª disse: " + msg);
				}
			}
		} catch (IOException e) {
			System.err.println("o cliente fechou a conexÃ£o");
			e.printStackTrace();
		}
	}
	public PrintWriter getEscritor() {
		return escritor;
	}
//	public BufferedReader getLeitor() {
//		return leitor;
//	}
	public String getNomeCliente() {
		return nomeCliente;
	}
}


//Cliente.java

package sockets;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.io.InputStreamReader;

public class Cliente {

	public static void main(String[] args) {
		try {
			final Socket cliente = new Socket("127.0.0.1", 9999);
			//lendo mensagem do servidor
			new Thread() {
				@Override
				public void run() {
					try {
						BufferedReader leitor = new BufferedReader(new InputStreamReader(cliente.getInputStream()));
						
						while(true) {
							String mensagem = leitor.readLine();
							System.out.println("O servidor disse: " + mensagem);
						}
					} catch (IOException e) {
						System.out.println("impossÃ­vel ler a resposta do servidor");
						e.printStackTrace();
					}
				}
			}.start();
			//escrevendo para o servidor 
			PrintWriter escritor = new PrintWriter(cliente.getOutputStream(), true);
			BufferedReader leitorTerminal = new BufferedReader(new InputStreamReader(System.in));
			String mensagemTerminal = ""; 
			while(true){
				mensagemTerminal = leitorTerminal.readLine();
				if((mensagemTerminal == null || mensagemTerminal.length() == 0)){
					continue;
				}
				escritor.println(mensagemTerminal);
				if(mensagemTerminal.equalsIgnoreCase("::SAIR")) {
					System.exit(0);
				}
				
			}
			
		} catch (UnknownHostException e) {
			System.out.println("O endereÃ§o passado Ã© invalido");
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("O Servidor estÃ¡ fora do ar");
			e.printStackTrace();
		}

	}

}
